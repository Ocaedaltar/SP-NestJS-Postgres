version: "3.8"

services:
  db:
    container_name: ${DB_CONTAINER}
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - data_network
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
      interval: 10s
      timeout: 10s
      retries: 25
      start_period: 2s

  api:
    container_name: ${PROJECT_NAME}_api
    image: ${PROJECT_NAME}-api-dev
    restart: unless-stopped
    build:
      context: services/api
      dockerfile: Dockerfile
    environment:
      BACK_PORT: ${BACK_PORT}
      BACK_HOST: ${BACK_HOST}
      FRONT_URL: ${FRONT_URL}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      HASH_SALT_ROUND: ${HASH_SALT_ROUND}
      SWAGGER: ${SWAGGER}
    ports:
      - "${BACK_PORT}:${BACK_PORT}"
      - "5555:5555" # REMOVE FOR THE CORRECTION
    volumes:
      - "./services/api:/app"
    networks:
      - data_network
    depends_on:
      db:
        condition: service_healthy
    # healthcheck: # Pour le client service
      # test: ["executable", "arg"]
      # interval: 1m30s
      # timeout: 30s
      # retries: 5
      # start_period: 30s

  # client:
  #   container_name: ${PROJECT_NAME}_client
  #   image: ${PROJECT_NAME}-client-dev
  #   restart: unless-stopped
  #   build:
  #     context: services/client
  #     dockerfile: Dockerfile
  #   environment:
  #     VITE_API: ${API}
  #     VITE_HOST: ${FRONT_HOST}
  #     VITE_PORT: ${FRONT_PORT}
  #   ports:
  #     - "${FRONT_PORT}:${FRONT_PORT}"
  #   volumes:
  #     - "./services/client:/app"
  #   depends_on:
  #     - api

networks:
  data_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
